name: VirusTotal scan

on:
  workflow_run:
    workflows: ["Build & Release (from private source)"]  # exact workflow name
    types: [completed]
  workflow_dispatch: {}   # optional manual trigger

jobs:
  vt:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # Find the most recent release tag (or add an input to pass a tag manually)
      - name: Get latest release tag
        id: tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName')" >> $GITHUB_OUTPUT

      - name: Find and download release asset (.exe or .zip)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p out
          ASSET=$(gh release view "${{ steps.tag.outputs.TAG }}" \
            --json assets -q '.assets[].name' | grep -E '\.exe$|\.zip$' | head -n1)
          if [ -z "$ASSET" ]; then
            echo "No .exe or .zip asset found." >&2
            exit 1
          fi
          gh release download "${{ steps.tag.outputs.TAG }}" --pattern "$ASSET" --dir out
          if [[ "$ASSET" == *.zip ]]; then unzip -j out/"$ASSET" -d out; fi
          ls -l out

      - name: Compute SHA256
        id: hash
        run: |
          FILE=$(ls out/*.exe | head -n1)
          if [ -z "$FILE" ]; then
            echo "No .exe after unzip." >&2; exit 1
          fi
          echo "FILE=$FILE" >> $GITHUB_OUTPUT
          echo "SHA=$(sha256sum "$FILE" | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Submit to VirusTotal (handles >32MB)
        id: vt
        env:
          VT_API_KEY: ${{ secrets.VT_API_KEY }}
        run: |
          FILE="${{ steps.hash.outputs.FILE }}"
          SIZE=$(stat -c%s "$FILE")

          if [ "$SIZE" -gt 33554432 ]; then
            UP=$(curl -s --request GET \
              --url https://www.virustotal.com/api/v3/files/upload_url \
              --header "x-apikey: $VT_API_KEY" | jq -r '.data')
            JSON=$(curl --silent --request POST --url "$UP" --form "file=@$FILE")
          else
            JSON=$(curl --silent --request POST \
              --url https://www.virustotal.com/api/v3/files \
              --header "x-apikey: $VT_API_KEY" \
              --form "file=@$FILE")
          fi

          ANALYSIS=$(echo "$JSON" | jq -r '.data.id')
          if [ -z "$ANALYSIS" ] || [ "$ANALYSIS" = "null" ]; then
            echo "Upload failed: $JSON" >&2; exit 1
          fi
          echo "ANALYSIS=$ANALYSIS" >> $GITHUB_OUTPUT

      - name: Wait for VT analysis
        id: poll
        env:
          VT_API_KEY: ${{ secrets.VT_API_KEY }}
        run: |
          ANALYSIS="${{ steps.vt.outputs.ANALYSIS }}"
          for i in {1..30}; do
            STATUS=$(curl -s --request GET \
              --url https://www.virustotal.com/api/v3/analyses/$ANALYSIS \
              --header "x-apikey: $VT_API_KEY" | jq -r '.data.attributes.status')
            echo "Status: $STATUS"
            [ "$STATUS" = "completed" ] && break
            sleep 10
          done

      - name: Create VirusTotal link + SHA file and upload to the release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ steps.hash.outputs.SHA }}  $(basename "${{ steps.hash.outputs.FILE }}")" > SHA256SUMS.txt
          echo "VirusTotal (SHA256 URL):" > VirusTotal.txt
          echo "https://www.virustotal.com/gui/file/${{ steps.hash.outputs.SHA }}" >> VirusTotal.txt
          gh release upload "${{ steps.tag.outputs.TAG }}" SHA256SUMS.txt VirusTotal.txt --clobber
